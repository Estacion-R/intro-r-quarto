{
  "hash": "56a96a8ec3763c6921362bbb380f1f1b",
  "result": {
    "markdown": "---\ntitle: \"Bilingual Materials with Quarto\"\nauthor: \"Dr. Kelly Bodwin\"\ninstitute: \"California Polytechnic State University\"\ndate: now\nformat: \n  revealjs:\n    incremental: true \n    slide-number: c\n    show-slide-number: all\n    theme: sky\n    embed-resources: true\nexecute:\n  eval: false\n  echo: true\n---\n\n\n# How does Quarto make python easier?\n\n## Engine Setup\n\nIn **R Markdown**, to use python, you had to set everything up **in R** using the *reticulate* package:\n\n##  {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n##  {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_config()\nuse_python(\"/usr/local/bin/python3\")\npy_discover_config()\n```\n:::\n\n\n##  {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_config()\nuse_python(\"/usr/local/bin/python3\")\npy_discover_config()\n\n## You may need the code below if you are working on your home Windows computer:\npy_run_string(\"import os as os\")\npy_run_string(\"os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/kbodwin/Anaconda3/Library/plugins/platforms'\")\n```\n:::\n\n\n##  {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_config()\nuse_python(\"/usr/local/bin/python3\")\npy_discover_config()\n\n## You may need the code below if you are working on your home Windows computer:\npy_run_string(\"import os as os\")\npy_run_string(\"os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = 'C:/Users/kbodwin/Anaconda3/Library/plugins/platforms'\")\n\nreticulate::py_install(\"pandas\")\nreticulate::py_install(\"scikit-learn\")\nreticulate::py_install(\"scipy\")\n```\n:::\n\n\n## Engine Setup\n\nNow, it's all \"under the hood\":\n\n```         \n---\ntitle: \"My document\"\njupyter: python3\n---\n```\n\n# Tricks for interweaving R and python\n\n## Choose your install in Global Options\n\n![](./images/global_opts_python.png)\n\n## Object passing\n\n-   Automatic variables named `py` and `r`\n\n-   Access *python* objects from *R* with `py$`\n\n-   Access *R* objects from *python* with `r.`\n\n## Object passing\n\n\n\n````default\n\n```{r}\n# read and filter data with R\nlibrary(palmerpenguins)\n\nadelie <-\n  penguins %>%\n  filter(species == \"Adelie\")\n```\n\n```{python}\n# model with python\nLR = LinearRegression()\n\nX = r.adelie[['bill_length_mm', 'bill_depth_mm']]\ny = r.adelie['mass_g']\n\nmod = LR.fit(X, y)\ncoef = mod.coef_\n```\n\n```{r}\n# summarize with R\npy$coef\n```\n\n````\n\n## Jupyter\n\n-   Do you like Jupyter notebooks? **Me too!**\n\n-   Do you like Colab and/or Posit Cloud? **Me too!**\n\n-   Do you want to make your materials in Quarto but distribute to students in Jupyter form? **Me too!**\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nquarto convert class_notes.qmd\nquarto convert class_notes.ipynb \n\nquarto render class_notes.ipynb\n```\n:::\n\n## Remaining challenges of multilingual docs\n\n1.  Most undergrad programs **don't require** multiple languages.\n\n2.  Detecting python **installs and packages** isn't perfect.\n\n3.  R and python do not always have the **same default implementations** for models.\n\n4.  What if what you want is not a **multilingual** document, but duplicated **translated** documents?\n\n# `versions()` functions in `templar` mini-package\n\n## What it does\n\nUpon rendering...\n\n1.  Identifies the **R chunks** from the **python chunks**\n\n2.  Identifies the **labeled text sections** for R or python.\n\n3.  Writes new **unilingual source files** (qmds) in separate folders\n\n4.  (Optionally) **Renders** those source files\n\n5.  (Optionally) **Converts** the python one to ipynb.\n\n# Example\n\n## First chunk\n\n\n````default\n```{r, version = \"none\"}\ntemplar::versions_quarto_multilingual(global_eval = FALSE,\n                                      to_jupyter = TRUE, \n                                      warn_edit = FALSE)\n```\n````\n\n-   `{version = \"none\"}`: this code itself should not appear in generated files\n\n-   `global_eval`: do you want to\n\n-   `to_jupyter`: do you want to convert the python version?\n\n-   `warn_edit`: put a warning at the top of generated files to not edit directly?\n\n## Code chunk versions\n\n\n\n````default\n\nThe first thing we need to do with any dataset is check for\nmissing data, and make sure the variables are the right type:\n\n```{r, version = \"R\"}\ndf %>% summary()\n```\n\n```{python, version = \"python\"}\ndf.info()\n```\n\n````\n\n## Versioned text\n\n\n````default\n\nThe next step is to clean the data.\n\n%%% version: R\n\nThe \"Color\" variable is being treated as a \"character\" variable,\ni.e., just an ordinary word.\n\nBut we know it should be *categorical*, aka a `factor` variable.\nLet's `mutate` the dataset to fix this:\n\n```{r, version = \"R\"}\ndf <- df %>%\n  mutate(\n    Color = factor(Color)\n  )\n\ndf %>% summary()\n```\n\n%%%\n\n%%% version: python\n\nThe \"Color\" variable is being treated as an \"object\" variable,\ni.e., just an ordinary word.\n\nBut we know it should be *categorical*, aka a `category` variable.\nLet's *retype* the variable to fix this:\n\n%%%\n\n```{python, version = \"python\"}\nkelly_df['Gender'] = kelly_df['Gender'].astype('category')\nkelly_df.info()\n```\n````\n\n## Why it's useful\n\n-   Keep the content creation all in one place - more **reproducible**!\n\n-   Elements of the document can be **shared** - e.g. data descriptions, question prompts, css chunks\n\n-   Give you **source files** to disseminate to students, not just *rendered files*.\n\n-   (Also lets you do *student* and *solution* version, or *Exam A* and *Exam B*, etc.)\n\n# What's next for `templar` and Quarto?\n\n## Lua translation\n\n-   **Parse** the source file text more elegantly\n\n-   Match **syntax** to Quarto's\n\n-   (`:::` instead of `%%%`)\n\n-   (`#| version: R` instad of `{version = \"R}`)\n\n-   Do you know Lua and `knitr`? Let's be friends.\n\n## Quarto's multi-output trick\n\nWhat it can do now:\n\n\n\n````default\n---\ntitle: \"My Versioned Doc\"\nformat: \n  html:\n    output-file: my_versioned_doc.html\n  pdf:\n    output-file: my_versioned_doc.pdf\n---\n\n::: {.content-visible when-format=\"html\"}\nClick here to expand!\n:::\n\n````\n\n\n## Quarto's multi-output trick\n\nWhat I want:\n\n\n\n````default\n---\ntitle: \"My Versioned Doc\"\nformat: \n  html+R:\n    output-file: handout-r.html\n  html+python:\n    output-file: handout-python.html\n---\n\n::: {.content-visible when-variant=\"R\"}\nThe function `mutate()` will add a new variable.\n:::\n````\n\n\n## Resources\n\nInstall the `templar` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"r-for-educators/templar\")\n```\n:::\n\n\n**Co-author: Ian Flores Siaca**\n\nContribute at [www.github.com/r-for-educators/templar](www.github.com/r-for-educators/templar)\n\nExamples of course materials generated with templar:\n\n<https://github.com/Statistical-Learning-with-R>\n\n# Thank You!\n\nFind me:\n\n**Email:** kbodwin\\@calpoly.edu\n\n**Website:** [www.kelly-bodwin.com](www.kelly-bodwin.com)\n\n**GitHub:** kbodwin\n\n**Mastodon:** kellybodwin\\@mastodon.social\n\n**Threads:** @kellbod\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}