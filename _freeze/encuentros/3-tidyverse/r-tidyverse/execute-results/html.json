{
  "hash": "4512bc67032d9f8177a11c72db537b55",
  "result": {
    "markdown": "---\ntitle: \"Procesando datos con `{tidyverse}`\"\nsubtitle: \"Principales herramientas (funciones) para el tratamiento de datos\"\nauthor: \"[🔗 Estación R](https://estacion-r.netlify.app/)\"\ninstitution: Estación R\ndate: 2024-02-21\nfooter: \"[🔗 Introducción al Procesamiento de Datos con R](https://pablotis.github.io/intro-r-quarto/)\"\nlogo: ../../img/background-estacion_r_v2.png\nformat: \n  revealjs: \n    theme: ../estilo_diapos.scss\n    multiplex: true\n    transition: fade\n    progress: true\n    highlight-style: printing\n    embed-resources: true\n    code-line-numbers: false\n    code-block-bg: true\n    code-copy: true\ncode-block-border-left: \"#31BAE9\"\nexecute:\n  execute:\n  freeze: auto\n  echo: true\n---\n\n\n# Bienvenidos y bienvenidas a Estación R\n\n::: columns\n::: {.column width=\"50%\"}\n💬 [Slack](https://join.slack.com/t/estacion-r/shared_invite/zt-2cktmesg3-11HhUxMFmynQe18ZsBkVpA)\n\n🔗 [Web](https://estacion-r.netlify.app/)\n\n🐘 [Mastodon](https://botsin.space/@r_tips)\n\n𝕏 [X](https://twitter.com/estacion_erre)\n\n✉️ [Correo](mailto:pablotisco@gmail.com)\n:::\n\n::: {.column width=\"50%\"}\n[Instagram](https://www.instagram.com/estacion_ere?igsh=OWhtcWR5ZGkwb3Bw&utm_source=qr)\n\n[LinkedIn](https://www.linkedin.com/company/estacion-r/)\n:::\n:::\n\n------------------------------------------------------------------------\n\n## ¿Qué vimos?\n\n<br>\n\n✅ Conceptos básicos de R (valores, vectores, data.framtes, funciones, objetos)\n\n<br>\n\n✅ Cómo armar y organizar un proyecto de trabajo\n\n<br>\n\n✅ Qué son los paquetes (o librerías)\n\n## Hoja de Ruta\n\n::: columns\n::: {.column width=\"50%\"}\n📌 ¿Qué es la Ciencia de Datos?\n\n<br>\n\n📦 Paquete `{dplyr}`\n\n```         \n🔧 `select()` 🔧 `filter()` \n\n🔧 `mutate()` 🔧 `rename()` \n\n🔧 `arrange()` \n\n🔧 `group_by()` 🔧 `summarise()`  \n\n🔧 `joins` \n```\n:::\n\n::: {.column width=\"50%\"}\n📌 La pipa (`|>` o `%>%`)\n\n<br>\n\n📦 Paquete `{tidyr}`\n\n```         \n🔧 `pivot_longer()` 🔧 `pivot_wider()`  \n```\n:::\n:::\n\n## Configuración para esta clase\n\n<br>\n\n-   Armar un proyeto de trabajo nuevo\n\n-   Crear una carpeta en el llamada `datos`\n\n-   Descargar la base del [**Padrón Único Nacional de Alojamientos**](https://datos.yvera.gob.ar/dataset/padron-unico-nacional-alojamiento) (Argentina) y ubicarla en la carpeta `datos`\n\n-   Crear un **script** de trabajo\n\n# ¿Qué es la Ciencia de Datos?\n\n## ¿Qué es la Ciencia de Datos?\n\n![](../1-intro-r/images/proceso_ciencia_datos.jpg){fig-alt=\"r project console\"}\n\n# `{tidyverse}`\n\n## ¿Qué es `{tidyverse}`?\n\n::: incremental\n-   Una colección de paquetes.\n\n-   Comparten una filosofía acerca de los datos y la programación en R (\"*tidy*\" -*ordenado*-).\n\n-   Tienen una coherencia para ser utilizados en conjunto.\n\n-   Orientado a ser leído y escrito por y para seres humanos.\n\n-   Una comunidad, basada en los principios del código abierto y trabajo colaborativo.\n:::\n\n## ¿Qué es `{tidyverse}`?\n\n![](../1-intro-r/images/circuito_del_dato_tidy.png)\n\n## `{tidyverse}`\n\n<br>\n\n-   Instalación:\n\n``` r\ninstall.packages(\"tidyverse\")\n```\n\n## `{tidyverse}`\n\n<br>\n\n-   Cargo el paquete:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## `{tidyverse}`\n\n-   Nos evita tener que instalar uno por uno a cada paquete:\n\n``` r\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"ggplot2\")\n```\n\n<br>\n\n-   Como también tener que convocarlos de a uno:\n\n``` r\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n\n# La pipa\n\n## Un operador llamado `pipa`\n\n<br>\n\n<br>\n\n::: columns\n::: {.column width=\"50%\"}\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_datos |> \n  funcion1 |> \n  funcion2 |>  \n  funcion3\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/pipa.gif)\n:::\n:::\n\n## Un operador llamado `pipa`\n\n<br>\n\n-   Pipa de **R base**: `|>`\n\n<br>\n\n-   Pipa de **{magritr}**: `%>%`\n\n## Ejemplo:\n\n<br> <br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos <- data.frame(nombre = c(\"Pirulanzo\", \"Rodogovia\", \"Rodogovia\", \"Rodogovia\"),\n                    edad = c(23, 12, 87, 32))\n\ndatos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     nombre edad\n1 Pirulanzo   23\n2 Rodogovia   12\n3 Rodogovia   87\n4 Rodogovia   32\n```\n:::\n:::\n\n\n## Ejemplo:\n\n-   Quiero calcular qué proporción de personas se llaman *Rodogovia*\n\n<br>\n\n-   Antes (*sin el pipe*):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(prop.table(table(datos$nombre)), digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPirulanzo Rodogovia \n      0.2       0.8 \n```\n:::\n:::\n\n\n## Ejemplo:\n\n<br>\n\n-   Después (*con el pipe*):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos$nombre |> \n  table() |> \n  prop.table() |> \n  round(digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPirulanzo Rodogovia \n      0.2       0.8 \n```\n:::\n:::\n\n\n# \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/logo dplyr.png){fig-align='center' width=30%}\n:::\n:::\n\n\n## Funciones del paquete dplyr:\n\n<br>\n\n| **Función**   |                            **Acción** |\n|:--------------|--------------------------------------:|\n| `select()`    |     *selecciona o descarta variables* |\n| `filter()`    |                    *selecciona filas* |\n| `mutate()`    |              *crea / edita variables* |\n| `rename()`    |                  *renombra variables* |\n| `group_by()`  | *segmenta en funcion de una variable* |\n| `summarize()` |         *genera una tabla de resúmen* |\n\n# **select()**\n\n<html>\n\n::: {style=\"float:left\"}\n:::\n\n<hr color='#EB811B' size=1px width=1125px>\n\n</html>\n\n<html>\n\n\n```{=html}\n<p style=\"color:grey;\" align:\"center\">Elige o descarta columnas de una base de datos</p>\n```\n\n</html>\n\n## `select()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_datos |> \n  select(id, nombre) #<<\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/select_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Caso práctico\n\n\n\n\n\n``` r\n# Cargo paquete\nlibrary(readr)\n\n# Importo datos\ndf_puna <- read_csv(\"datos/puna_base_agregada.csv\")\n```\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exploro la base\ncolnames(df_puna)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"indice_tiempo\"           \"region\"                 \n [3] \"ruta_natural\"            \"provincia_codigo\"       \n [5] \"provincia_nombre\"        \"departamento_partido\"   \n [7] \"localidad\"               \"clasificacion_minturdep\"\n [9] \"tipo\"                    \"establecimientos\"       \n[11] \"unidades\"                \"habitaciones\"           \n[13] \"plazas\"                 \n```\n:::\n:::\n\n\n## Caso práctico\n\n<br>\n\n-   **Pedido:** La coordinadora me ha solicitado conocer la cantidad de plazas que hay por localidad y, si es posible, saber de qué tipo son los alojamientos\n\n<br>\n\n-   Variables de trabajo:\n\n    -   *localidad*\n    -   *plazas*\n    -   *tipo*\n\n## Caso práctico\n\n<br>\n\n-   Selecciono las 3 columnas de interés\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3,4\"}\nlibrary(tidyverse)\n\ndf_puna |> \n  select(localidad, tipo, plazas)\n```\n:::\n\n\n## Caso práctico\n\n<br>\n\n-   Selecciono las 3 columnas de interés\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nlibrary(tidyverse)\n\ndf_puna_sel <- df_puna |> \n  select(localidad, tipo, plazas)\n```\n:::\n\n\n<br>\n\n-   Chequeo las columnas del nuevo objeto\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ncolnames(df_puna_sel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"localidad\" \"tipo\"      \"plazas\"   \n```\n:::\n:::\n\n\n# Otras formas de seleccionar...\n\n## `select()` - *por posición*\n\n<br>\n\n1.  Chequeo la posición:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"indice_tiempo\"           \"region\"                 \n [3] \"ruta_natural\"            \"provincia_codigo\"       \n [5] \"provincia_nombre\"        \"departamento_partido\"   \n [7] \"localidad\"               \"clasificacion_minturdep\"\n [9] \"tipo\"                    \"establecimientos\"       \n[11] \"unidades\"                \"habitaciones\"           \n[13] \"plazas\"                 \n```\n:::\n:::\n\n\n## `select()` - *por posición*\n\n<br>\n\n2.  Selecciono\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion <- df_puna |> \n  select(7, 9, 13)\n```\n:::\n\n\n## `select()` - *por posición*\n\n<br>\n\n3.  Chequeo\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"localidad\" \"tipo\"      \"plazas\"   \n```\n:::\n:::\n\n\n## `select()` - *por posición (columnas consecutivas)*\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion2 <- df_puna |> \n  select(1:3)\n```\n:::\n\n\n## `select()` - *por posición (columnas consecutivas)*\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion2 <- df_puna |> \n  select(1:3)\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"indice_tiempo\" \"region\"        \"ruta_natural\" \n```\n:::\n:::\n\n\n#  {.center auto-animate=\"true\"}\n\n![](https://imgs.search.brave.com/Frz7Kuv_uvyXQb269pQbZ2-UxWSZ-oIPOgfP4lTWmmU/rs:fit:860:0:0/g:ce/aHR0cHM6Ly9naWZk/Yi5jb20vaW1hZ2Vz/L2hpZ2gvc2FjaGEt/YmFyb24tY29oZW4t/dmVyeS1uaWNlLXFq/N2x5YXFudXBueTl6/ODAuZ2lm.gif)\n\n## `select()` - *por nombre (consecutiva)*\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion3 <- df_puna |> \n  select(establecimientos:plazas)\n```\n:::\n\n\n## `select()` - *por nombre (consecutiva)*\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_posicion3 <- df_puna |> \n  select(establecimientos:plazas)\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_posicion3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"establecimientos\" \"unidades\"         \"habitaciones\"     \"plazas\"          \n```\n:::\n:::\n\n\n# \n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExeXk3OXA1YnRnOGFkOGxqMjd4ZHU4MzZha2I4dzhqMmw0NTFmN2RoZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/d4W4ZshZVbrqYvVnh8/giphy.gif)\n\n## `select()` - *Por patrones de texto*\n\n<br>\n\n**Trío:**\n\n-   `starts_with()` --\\> *empieza con...*\n\n-   `ends_with()` --\\> *termina con...*\n\n-   `contains()` --\\> *contiene...*\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron1 <- df_puna |> \n  select(starts_with(\"provincia\"))\n```\n:::\n\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron1 <- df_puna |> \n  select(starts_with(\"provincia\"))\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"provincia_codigo\" \"provincia_nombre\"\n```\n:::\n:::\n\n\n## `select()` + `ends_with()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron2 <- df_puna |> \n  select(ends_with(\"o\"))\n```\n:::\n\n\n## `select()` + `starts_with()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron2 <- df_puna |> \n  select(ends_with(\"o\"))\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"indice_tiempo\"        \"provincia_codigo\"     \"departamento_partido\"\n[4] \"tipo\"                \n```\n:::\n:::\n\n\n# \n\n![](https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbjEzMW15cWk3bXJ5MzQ0aXQwd2IwenIyN3JseTlucW9nc2R0enY4NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Lk023zZqHJ3Zz4rxtV/giphy.gif)\n\n## `select()` + `contains()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron3 <- df_puna |> \n  select(contains(\"_\"))\n```\n:::\n\n\n## `select()` + `contains()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_sel_patron3 <- df_puna |> \n  select(contains(\"_\"))\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_sel_patron3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"indice_tiempo\"           \"ruta_natural\"           \n[3] \"provincia_codigo\"        \"provincia_nombre\"       \n[5] \"departamento_partido\"    \"clasificacion_minturdep\"\n```\n:::\n:::\n\n\n# \n\n![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExYXprbDVsM2l1MmF5dDRjMGY1N2xiNW52dmFscHNsM3NhbDZ5eXc5NSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/NEvPzZ8bd1V4Y/giphy.gif)\n\n# LA COMBINACIÓN FINAL\n\n## `select()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\ndf_puna_select_tuto <- df_puna |> \n  select(localidad, 2, starts_with(\"provincia\"), 9:11)\n```\n:::\n\n\n## `select()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ndf_puna_select_tuto <- df_puna |> \n  select(localidad, 2, starts_with(\"provincia\"), 9:11)\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_puna_select_tuto)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"localidad\"        \"region\"           \"provincia_codigo\" \"provincia_nombre\"\n[5] \"tipo\"             \"establecimientos\" \"unidades\"        \n```\n:::\n:::\n\n\n# \n\n![](images/explode.gif)\n\n# Ejercitación grupal\n\n## Ejercitación\n\n-   Crear un objeto en donde importamos la base de datos de Alojamientos.\n\n-   Seleccionar 3 variables de la base según el nombre de las mismas y guardar en otro objeto.\n\n-   Seleccionar 3 variables de la base según la posición de las mismas y guardar en otro objeto.\n\n-   Seleccionar todas las variables que **empiecen** con un patrón de texto (a elegir).\n\n# **filter()**\n\n<html>\n\n::: {style=\"float:left\"}\n:::\n\n<hr color='#EB811B' size=1px width=1125px>\n\n</html>\n\n<html>\n\n\n```{=html}\n<p style=\"color:grey;\" align:\"center\">Define los casos (filas) en base a una condición</p>\n```\n\n</html>\n\n## `filter()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbase_de_datos |> \n  filter(condicion) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/filter_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## `filter()`\n\n<br>\n\n-   La función tiene la siguiente estructura:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbase_de_datos |> \n  filter(Edad > 65) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/filter_presentacion.png){fig-align='center' width=65%}\n:::\n:::\n\n\n## Caso práctico\n\n<br>\n\n-   La directora de tesis me pidió que estudie los alojamientos de tipo **Camping**.\n\n<br>\n\n-   Universo de análisis / Población de estudio:\n\n    ```         \n    - Alojamientos tipo _Camping_\n    ```\n\n## Caso práctico\n\n<br>\n\n-   Chequeo con qué tipos de alojamiento cuento en la base:\n\n## Caso práctico\n\n<br>\n\n-   Chequeo con qué tipos de alojamiento cuento en la base:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(df_puna$clasificacion_minturdep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Albergue municipal / complejo deportivo\"\n [2] \"Caba\\xf1as / bungalows\"                 \n [3] \"Conjunto de unidades turisticas\"        \n [4] \"Establecimiento rural\"                  \n [5] \"Hosteria\"                               \n [6] \"Hotel 1 estrella\"                       \n [7] \"Hotel 2 estrellas\"                      \n [8] \"Hotel boutique\"                         \n [9] \"Hotel sin categorizar\"                  \n[10] \"Residencial\"                            \n[11] \"Camping\"                                \n[12] \"Hotel 3 estrellas\"                      \n[13] \"Sin clasificar\"                         \n[14] \"Motel\"                                  \n[15] \"Hospedaje\"                              \n[16] \"Posada\"                                 \n[17] \"Apart hotel\"                            \n[18] \"Albergue / b&b / hostel\"                \n[19] \"Hotel 4 estrellas\"                      \n[20] \"Hotel 5 estrellas\"                      \n[21] \"Dormis\"                                 \n[22] \"Residencia universitaria\"               \n[23] \"Hotel sindical / mutual\"                \n[24] \"Complejo turistico\"                     \n[25] \"Refugio\"                                \n[26] \"Pension\"                                \n[27] \"Lodge de pesca / caza/ en bodegas\"      \n```\n:::\n:::\n",
    "supporting": [
      "r-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}